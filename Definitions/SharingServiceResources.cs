using System.IO;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using UnityEngine;

namespace SharingService
{
    public static class SharingServiceResources
    {
        /// <summary>
        /// The prefix used for generated prefabs variants.
        /// </summary>
        public static string GeneratedPrefix = "_Generated_";

        /// <summary>
        /// Convert a resource to a version that will work for the given sharing provider.
        /// </summary>
        public static async Task<GameObject> Convert(SharingProviderType service, GameObject original)
        {
            if (original == null)
            {
                return null;
            }

            string name = Convert(service, original.name);
            var result = await Resources.LoadAsync(name).AsTask<GameObject>();

            if (result == null)
            {
                result = original;
            }

            return result;
        }

        /// <summary>
        /// Convert a resource name to a name that will work for the given sharing provider.
        /// </summary>
        public static string Convert(SharingProviderType service, string name)
        {
            return $"{GeneratedPrefix}{service}_{name}";
        }

        /// <summary>
        /// Determine if the given resource used generated by this service component.
        /// </summary>
        public static bool IsGenerated(GameObject gameObject)
        {
            return gameObject != null && IsGenerated(gameObject.name);
        }

        /// <summary>
        /// Determine if the given resource used generated by this service component.
        /// </summary>
        public static bool IsGenerated(string name)
        {
            return !string.IsNullOrEmpty(name) && name.StartsWith(GeneratedPrefix);
        }
    }

#if UNITY_EDITOR
    public class SharingServiceResourceEditorRunner : UnityEditor.Build.IPreprocessBuildWithReport
    {
        public int callbackOrder { get { return 0; } }

        [RuntimeInitializeOnLoadMethod]
        private static void CreateVariants()
        {
#if PHOTON_INSTALLED
            (new Photon.PhotonResourceEditor()).CreateVariants();
#endif
        }

        /// <summary>
        /// Prepare sharing service variants of sharable prefab resources.
        /// </summary>
        public void OnPreprocessBuild(UnityEditor.Build.Reporting.BuildReport report)
        {
            //CreateVariants();
        }
    }

    public class SharingServiceResourceEditor 
    {
        private SharingProviderType _service;

        protected SharingServiceResourceEditor(SharingProviderType service)
        {
            _service = service;
        }

        /// <summary>
        /// Prepare sharing service variants of sharable prefab resources.
        /// </summary>
        public void CreateVariants()
        { 
            var prefabs = Resources.LoadAll<GameObject>(string.Empty);
            foreach (var prefab in prefabs)
            {               
                if (!SharingServiceResources.IsGenerated(prefab) &&
                    prefab.GetComponent<SharingObject>() != null)
                {
                    Create(prefab);
                }
            }
        }

        /// <summary>
        /// Copy an original resource and create a version that is supported by the Sharing Service provider.
        /// </summary>
        /// <param name="original"></param>
        private void Create(GameObject original)
        {
            var resourcesDirectory = GetFolder();
            var name = SharingServiceResources.Convert(_service, original.name);
            var filePath = $"{resourcesDirectory.FullName}\\{name}.prefab";
            var resourcesPath = resourcesDirectory.FullName.Replace(Application.dataPath, "Assets");

            if (!File.Exists(filePath))
            {
                GameObject instanceRoot = UnityEditor.PrefabUtility.InstantiatePrefab(original) as GameObject;
                InitializeVariant(instanceRoot);

                UnityEditor.PrefabUtility.SaveAsPrefabAsset(instanceRoot, $"{resourcesPath}\\{name}.prefab");
                UnityEngine.Object.DestroyImmediate(instanceRoot);
            }
        }

        protected virtual void InitializeVariant(GameObject variant)
        {
        }

        private DirectoryInfo GetFolder([CallerFilePath] string filePath = "")
        {
            string path = Path.Combine(Application.dataPath,_service.ToString(),"Generated","Resources");
            DirectoryInfo directory = new DirectoryInfo(path);

            if (!Directory.Exists(path))
            {
                // If it doesn't exist, create it
                Directory.CreateDirectory(path);
            }

            return directory;
        }
    }
#endif 
}